windows = ($cxx.target.class == 'windows')

tar_extract = [cmdline] \
              ($windows \
               ? tar --force-local -xf \
               : tar -xf)

diag = [cmdline] echo >&2 2>|

# Extract the files from archive.
#
# Note: created with `XZ_OPT=-e9 tar cfJ boost_1_81_0.tar.xz boost_1_81_0`
#
dir = boost_1_81_0

# Preparation.
#
+$diag "Extract files from archive"
+$tar_extract $src_base/boost_1_81_0.tar.xz &$dir/***

# Create an empty sub-directory for the testing purposes.
#
+mkdir $dir/empty-dir

# Benchmark on Windows.
#
+if ($windows)

  # Prepare files for modification time sync test.
  #
  $diag ""
  $diag "Prepare files for modification time sync test"

  mod_dir = [dir_path] $dir/mod-dir
  mkdir $mod_dir

  i = [uint64] 0
  n = [uint64] 300

  while ($i != $n)
    echo "$i" >= "$mod_dir/$i"
    i += 1
  end

  # Prepare files list.
  #
  $diag "Build files list"
  $* iter -n -P 1 $dir >=files 2>|

  # Stat.
  #

  # GetFileAttributesA
  #
  $diag ""
  $diag "Stat using GetFileAttributesA"
  $* stat -a files 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  gfa_time = [uint64] 0

  while ($i != $n)
    $* stat -a -r files 2>| | set t [uint64]
    gfa_time += $t
    i += 1
  end

  $* avg $gfa_time $n | set gfa_time

  # GetFileAttributesExA
  #
  $diag ""
  $diag "Stat using GetFileAttributesExA"
  $* stat -e files 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  gfae_time = [uint64] 0

  while ($i != $n)
    $* stat -e -r files 2>| | set t [uint64]
    gfae_time += $t
    i += 1
  end

  $* avg $gfae_time $n | set gfae_time

  # GetFileInformationByHandle
  #
  $diag ""
  $diag "Stat using GetFileInformationByHandle"
  $* stat -h files 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  gfibh_time = [uint64] 0

  while ($i != $n)
    $* stat -h -r files 2>| | set t [uint64]
    gfibh_time += $t
    i += 1
  end

  $* avg $gfibh_time $n | set gfibh_time

  # Iterate.
  #

  # _findfirst
  #
  $diag ""
  $diag "Iterate using _findfirst"
  $* iter -p $dir 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  ff_time = [uint64] 0

  while ($i != $n)
    $* iter -p -r $dir 2>| | set t [uint64]
    ff_time += $t
    i += 1
  end

  $* avg $ff_time $n | set ff_time

  # FindFirstFileA
  #
  $diag ""
  $diag "Iterate using FindFirstFileA"
  $* iter -n $dir 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  fff_time = [uint64] 0

  while ($i != $n)
    $* iter -n -r $dir 2>| | set t [uint64]
    fff_time += $t
    i += 1
  end

  $* avg $fff_time $n | set fff_time

  # FindFirstFileExA
  #
  $diag ""
  $diag "Iterate using FindFirstFileExA"
  $* iter -N $dir 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  fffe_time = [uint64] 0

  while ($i != $n)
    $* iter -N -r $dir 2>| | set t [uint64]
    fffe_time += $t
    i += 1
  end

  $* avg $fffe_time $n | set fffe_time

  # FindFirstFileExA + GetFileAttributesExA
  #
  $diag ""
  $diag "Iterate using FindFirstFileA + GetFileAttributesExA"
  $* iter -N -e $dir 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  fffe_gfae_time = [uint64] 0

  while ($i != $n)
    $* iter -N -e -r $dir 2>| | set t [uint64]
    fffe_gfae_time += $t
    i += 1
  end

  $* avg $fffe_gfae_time $n | set fffe_gfae_time

  t = $fffe_time
  t += $gfae_time

  r = "
Time per entry \(nanoseconds\):
  GetFileAttributesA:                      $gfa_time
  GetFileAttributesExA:                    $gfae_time
  GetFileInformationByHandle:              $gfibh_time

  _findfirst:                              $ff_time
  FindFirstFileA:                          $fff_time
  FindFirstFileExA:                        $fffe_time

  FindFirstFileExA + GetFileAttributesExA: $fffe_gfae_time \(vs $t = $fffe_time + $gfae_time\)
"
  # Modification time sync.
  #
  $diag ""
  $diag "Testing modification time sync"

  i = [uint64] 0
  n = [uint64] 300

  while ($i != $n)
    echo "$i" >+ "$mod_dir/$i"
    i += 1
  end

  $* iter -N -e $mod_dir 2>|

  $diag "$r"
else
  $diag "Build files list"
  $* iter -o -P 1 $dir >=files 2>|

  # Stat.
  #

  # stat
  #
  $diag ""
  $diag "Stat using stat"
  $* stat -s files 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  s_time = [uint64] 0

  while ($i != $n)
    $* stat -s -r files 2>| | set t [uint64]
    s_time += $t
    i += 1
  end

  $* avg $s_time $n | set s_time

  # Iterate.
  #

  # opendir
  #
  $diag ""
  $diag "Iterate using opendir"
  $* iter -o $dir 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  od_time = [uint64] 0

  while ($i != $n)
    $* iter -o -r $dir 2>| | set t [uint64]
    od_time += $t
    i += 1
  end

  $* avg $od_time $n | set od_time

  # stat + opendir
  #
  $diag ""
  $diag "Iterate using opendir + stat"
  $* iter -o -s $dir 2>! # Heat-up.

  i = [uint64] 0
  n = [uint64] 30
  od_s_time = [uint64] 0

  while ($i != $n)
    $* iter -o -s -r $dir 2>| | set t [uint64]
    od_s_time += $t
    i += 1
  end

  $* avg $od_s_time $n | set od_s_time

  t = $od_time
  t += $s_time

  r = "
Time per entry \(nanoseconds\):
  stat:    $s_time

  opendir: $od_time

  opendir + stat: $od_s_time \(vs $t = $od_time + $s_time\)
"
  $diag "$r"
end
